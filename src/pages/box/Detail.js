import React, { useState } from 'react';
import { useLocation } from 'react-router-dom';
import {
  Box,
  Image,
  Text,
  Heading,
  Stack,
  Badge,
  Button,
  Divider,
  VStack,
  useToast,
  Modal,
  ModalOverlay,
  ModalContent,
  ModalHeader,
  ModalBody,
  ModalFooter,
  ModalCloseButton,
} from '@chakra-ui/react';
import boxApi from '../../api/boxApi';
import buyApi from '../../api/buyApi';
import moment from 'moment'; // Import moment ƒë·ªÉ ƒë·ªãnh d·∫°ng ng√†y gi·ªù

const Detail = () => {
  const { state: box } = useLocation(); // L·∫•y d·ªØ li·ªáu box t·ª´ state
  const [isCongratsOpen, setIsCongratsOpen] = useState(false); // Tr·∫°ng th√°i m·ªü l·ªõp ph·ªß ch√∫c m·ª´ng
  const [congratsMessage, setCongratsMessage] = useState(''); // Th√¥ng b√°o ch√∫c m·ª´ng
  const toast = useToast();

  if (!box) {
    return (
      <Box p={5} textAlign="center">
        <Text fontSize="lg" color="red.500">
          Kh√¥ng t√¨m th·∫•y th√¥ng tin box.
        </Text>
      </Box>
    );
  }

  const imageUrl = boxApi.getImageUrl(box.image); // L·∫•y URL h√¨nh ·∫£nh t·ª´ API
  const discountedPrice = box.discount > 0
    ? Math.round((box.price || 0) * (1 - (box.discount || 0) / 100))
    : box.price || 0;

  const discountedCoinPrice = box.discount > 0
    ? Math.round((box.coinPrice || 0) * (1 - (box.discount || 0) / 100))
    : box.coinPrice || 0;

  const handleBuy = async (type) => {
    try {
      const user = JSON.parse(localStorage.getItem('user')); // L·∫•y th√¥ng tin ng∆∞·ªùi d√πng t·ª´ localStorage
      if (!user) {
        toast({
          title: 'L·ªói',
          description: 'B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ th·ª±c hi·ªán giao d·ªãch n√†y.',
          status: 'warning',
          duration: 3000,
          isClosable: true,
        });
        return;
      }
      const username = user.username; // L·∫•y t√™n ng∆∞·ªùi d√πng t·ª´ th√¥ng tin ng∆∞·ªùi d√πng
      const response = await buyApi.buyItem(box.boxId, username, type); // G·ªçi API mua

      // Hi·ªÉn th·ªã th√¥ng tin quan tr·ªçng t·ª´ ph·∫£n h·ªìi API
      const { reward, userBalance, userCoins } = response.data;

      setCongratsMessage(`
        üéâ Ch√∫c m·ª´ng b·∫°n ƒë√£ tr√∫ng ph·∫ßn th∆∞·ªüng:
        - T√™n: ${reward.label}
        - ƒê·ªô hi·∫øm: ${reward.rarity}
        - Lo·∫°i: ${reward.type}
        - Gi√° tr·ªã: ${reward.value}
        - M√¥ t·∫£: ${reward.description || 'Kh√¥ng c√≥ m√¥ t·∫£'}
        
        üí∞ S·ªë d∆∞ hi·ªán t·∫°i:
        - Ti·ªÅn: ${userBalance.toLocaleString()} VND
        - Xu: ${userCoins.toLocaleString()} Coin
      `);
      setIsCongratsOpen(true); // M·ªü l·ªõp ph·ªß ch√∫c m·ª´ng
    } catch (error) {
      toast({
        title: 'L·ªói',
        description: error.response?.data?.message || 'Kh√¥ng th·ªÉ mua v·∫≠t ph·∫©m',
        status: 'error',
        duration: 3000,
        isClosable: true,
      });
    }
  };

  return (
    <Box p={5} maxW="800px" mx="auto">
      <Stack spacing={5}>
        {/* H√¨nh ·∫£nh */}
        <Image
          src={imageUrl}
          alt={box.name || 'H·ªôp qu√†'}
          borderRadius="md"
          objectFit="cover"
          maxH="300px"
          mx="auto"
        />

        {/* T√™n v√† lo·∫°i box */}
        <Heading textAlign="center">{box.name || 'Kh√¥ng c√≥ t√™n'}</Heading>
        <Badge colorScheme="blue" alignSelf="center">
          {box.boxType || 'Kh√¥ng x√°c ƒë·ªãnh'}
        </Badge>

        {/* M√¥ t·∫£ */}
        <Text fontSize="lg" color="gray.600" textAlign="justify">
          {box.description || 'Kh√¥ng c√≥ m√¥ t·∫£'}
        </Text>

        <Divider />

        {/* Gi√° v√† gi·∫£m gi√° */}
        <VStack spacing={2} align="start">
          {box.discount > 0 ? (
            <>
              <Text fontSize="md" color="gray.500" textDecoration="line-through">
                Gi√° g·ªëc: {(box.price || 0).toLocaleString()} VND
              </Text>
              <Text fontSize="md" color="gray.500" textDecoration="line-through">
                Gi√° Coin g·ªëc: {(box.coinPrice || 0).toLocaleString()} Coin
              </Text>
              <Text fontWeight="bold" fontSize="xl" color="teal.500">
                Gi√° sau gi·∫£m: {discountedPrice.toLocaleString()} VND
              </Text>
              <Text fontWeight="bold" fontSize="xl" color="teal.500">
                Gi√° Coin sau gi·∫£m: {discountedCoinPrice.toLocaleString()} Coin
              </Text>
              <Text fontSize="md" color="yellow.500">
                Gi·∫£m gi√°: {box.discount || 0}%
              </Text>
            </>
          ) : (
            <>
              <Text fontWeight="bold" fontSize="xl" color="gray.700">
                Gi√°: {box.price.toLocaleString()} VND
              </Text>
              <Text fontWeight="bold" fontSize="xl" color="gray.700">
                Gi√° Coin: {box.coinPrice.toLocaleString()} Coin
              </Text>
            </>
          )}
        </VStack>

        <Divider />

        {/* Th√¥ng tin th·ªùi gian */}
        <VStack spacing={2} align="start">
          <Text fontSize="sm" color="gray.500">
            Ng√†y t·∫°o: {moment(box.createdAt).format('DD/MM/YYYY HH:mm:ss') || 'Kh√¥ng x√°c ƒë·ªãnh'}
          </Text>
          <Text fontSize="sm" color="gray.500">
            C·∫≠p nh·∫≠t l·∫ßn cu·ªëi: {moment(box.updatedAt).format('DD/MM/YYYY HH:mm:ss') || 'Kh√¥ng x√°c ƒë·ªãnh'}
          </Text>
        </VStack>

        <Divider />

        {/* N√∫t h√†nh ƒë·ªông */}
        <Stack direction="row" align="center" justify="space-between">
          <Button colorScheme="teal" size="md" onClick={() => handleBuy('vnd')}>
            Mua b·∫±ng VND
          </Button>
          <Button colorScheme="orange" size="md" onClick={() => handleBuy('coin')}>
            Mua b·∫±ng Coin
          </Button>
        </Stack>
      </Stack>

      {/* L·ªõp ph·ªß ch√∫c m·ª´ng */}
      <Modal isOpen={isCongratsOpen} onClose={() => setIsCongratsOpen(false)}>
        <ModalOverlay />
        <ModalContent>
          <ModalHeader>Ch√∫c m·ª´ng!</ModalHeader>
          <ModalCloseButton />
          <ModalBody>
            <Text fontSize="lg" fontWeight="bold" textAlign="center">
              {congratsMessage}
            </Text>
          </ModalBody>
          <ModalFooter>
            <Button colorScheme="teal" onClick={() => setIsCongratsOpen(false)}>
              ƒê√≥ng
            </Button>
          </ModalFooter>
        </ModalContent>
      </Modal>
    </Box>
  );
};

export default Detail;